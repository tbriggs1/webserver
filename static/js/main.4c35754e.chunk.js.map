{"version":3,"sources":["components/Privacy.js","components/TermsOfUse.js","components/Tab.js","components/ConsentPopup.js","components/ClosePopup.js","components/TabConfig.js","components/test.js","components/App.js","index.js"],"names":["Privacy","React","Component","TermsOfUse","Tab","props","ssoLoginSuccess","result","a","setState","ssoToken","exchangeClientTokenForServerToken","token","serverURL","process","fetch","catch","unhandledFetchError","response","json","data","ok","error","graphAccessToken","console","consentRequired","showConsentDialog","componentDidUpdate","prevProps","prevState","state","callGraphFromClient","upn","context","graphPhotoEndpoint","graphRequestParams","method","headers","blob","imageBlog","photo","URL","createObjectURL","consentProvided","bind","ssoLoginFailure","consentSuccess","consentFailure","microsoftTeams","authTokenRequestOptions","successCallback","failureCallback","getAuthToken","this","authenticate","url","window","location","origin","width","height","reason","err","content","title","Object","keys","length","Loader","ssoMessage","label","serverExchangeMessage","consentMessage","avatar","Avatar","image","size","ConsentPopup","tenant","queryParams","client_id","response_type","scope","redirect_uri","nonce","crypto","randomBytes","toString","authorizeEndpoint","URLSearchParams","assign","ClosePopup","hashParams","getHashParameters","notifySuccess","notifyFailure","hash","substr","split","forEach","item","key","value","decodeURIComponent","TabConfig","registerOnSaveHandler","saveEvent","baseUrl","hostname","port","setSettings","setValidityState","test","App","exact","path","component","ReactDOM","render","Provider","theme","themes","teams","StrictMode","document","getElementById"],"mappings":"6kBAqBeA,E,uKART,OACE,6BACE,sD,GAJYC,IAAMC,WCUbC,E,uKART,OACE,6BACE,iD,GAJeF,IAAMC,W,mDCwLhBE,E,kDAtLb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAyCRC,gBA1CkB,uCA0CA,WAAOC,GAAP,SAAAC,EAAA,sDAChB,EAAKC,SAAS,CAACC,SAASH,IACxB,EAAKI,kCAAkCJ,GAFvB,2CA1CA,wDAsDlBI,kCAtDkB,uCAsDkB,WAAOC,GAAP,mBAAAJ,EAAA,6DAE9BK,EAF8B,UAEfC,6BAFe,yCAEgDF,GAFhD,SAGbG,MAAMF,GAAWG,MAAM,EAAKC,qBAHf,cAG9BC,EAH8B,gBAIjBA,EAASC,OAAOH,MAAM,EAAKC,qBAJV,OAI9BG,EAJ8B,OAM9BF,EAASG,IAAmB,qBAAbD,EAAKE,MAKZJ,EAASG,GAMnB,EAAKZ,SAAS,CAACc,iBAAiBH,EAAI,gBAJpCI,QAAQF,MAAMF,GACd,EAAKX,SAAS,CAACa,OAAM,MALrB,EAAKb,SAAS,CAACgB,iBAAgB,IAC/B,EAAKC,qBAV2B,2CAtDlB,wDAwGlBC,mBAxGkB,uCAwGG,WAAOC,EAAWC,GAAlB,SAAArB,EAAA,sDAGgB,KAA/BqB,EAAUN,kBAA6D,KAAhC,EAAKO,MAAMP,kBACpD,EAAKQ,sBAJY,2CAxGH,0DAkHlBA,oBAlHkB,sBAkHI,oCAAAvB,EAAA,6DAChBwB,EAAM,EAAKF,MAAMG,QAAX,IACNC,EAFgB,iDAE+CF,EAF/C,iBAGhBG,EAAqB,CACvBC,OAAQ,MACRC,QAAS,CACP,eAAgB,YAChB,cAAiB,UAAY,EAAKP,MAAMP,mBAPxB,SAWCR,MAAMmB,EAAmBC,GAAoBnB,MAAM,EAAKC,qBAXzD,cAWhBC,EAXgB,QAYPG,KACXG,QAAQF,MAAM,UAAWJ,GACzB,EAAKT,SAAS,CAACa,OAAM,KAdH,SAiBEJ,EAASoB,OAAOtB,MAAM,EAAKC,qBAjB7B,OAiBhBsB,EAjBgB,OAmBpB,EAAK9B,SAAS,CACZ+B,MAAOC,IAAIC,gBAAgBH,KApBT,4CAhHpB,EAAKT,MAAQ,CACXG,QAAS,GACTvB,SAAU,GACVe,iBAAiB,EACjBkB,iBAAiB,EACjBpB,iBAAkB,GAClBiB,MAAO,GACPlB,OAAO,GAIT,EAAKhB,gBAAkB,EAAKA,gBAAgBsC,KAArB,gBACvB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAK3B,oBAAsB,EAAKA,oBAAoB2B,KAAzB,gBAC3B,EAAKb,oBAAsB,EAAKA,oBAAoBa,KAAzB,gBAC3B,EAAKlB,kBAAoB,EAAKA,kBAAkBkB,KAAvB,gBAnBT,E,gEAwBE,IAAD,OAEjBI,eAGAA,cAA0B,SAACf,EAASX,GAClC,EAAKb,SAAS,CAACwB,QAAQA,OAIzB,IAAIgB,EAA0B,CAC5BC,gBAAiB,SAAC3C,GAAa,EAAKD,gBAAgBC,IACpD4C,gBAAiB,SAAC7B,GAAW,EAAKuB,gBAAgBvB,KAGpD0B,iBAA8BI,aAAaH,K,sCAQ7B3B,GACdE,QAAQF,MAAM,eAAeA,GAC7B+B,KAAK5C,SAAS,CAACa,OAAM,M,0CA4BH,IAAD,OAEjB0B,iBAA8BM,aAAa,CACzCC,IAAKC,OAAOC,SAASC,OAAS,cAC9BC,MAAO,IACPC,OAAQ,IACRV,gBAAiB,SAAC3C,GAAY,EAAKuC,eAAevC,IAClD4C,gBAAiB,SAACU,GAAY,EAAKd,eAAec,Q,qCAKvCtD,GAEb8C,KAAK5C,SAAS,CACZc,iBAAkBhB,EAClBoC,iBAAiB,M,qCAINkB,GACbrC,QAAQF,MAAM,mBAAmBuC,GACjCR,KAAK5C,SAAS,CAACa,OAAM,M,0CAwCHwC,GAClBtC,QAAQF,MAAM,0BAA0BwC,GACxCT,KAAK5C,SAAS,CAACa,OAAM,M,+BAKnB,IAeIyC,EAfAC,EAAQC,OAAOC,KAAKb,KAAKvB,MAAMG,SAASkC,OAAS,EACnD,mBAAqBd,KAAKvB,MAAMG,QAAX,IAA4B,qBAAuB,kBAACmC,EAAA,EAAD,MAEtEC,EAAqC,KAAxBhB,KAAKvB,MAAMpB,SAC1B,kBAAC0D,EAAA,EAAD,CAAQE,MAAM,yDAA0D,KAEtEC,EAAiD,KAAxBlB,KAAKvB,MAAMpB,UAAsB2C,KAAKvB,MAAML,iBAAwC,KAAnB4B,KAAKvB,MAAMU,MAC7B,KAA1E,kBAAC4B,EAAA,EAAD,CAAQE,MAAM,0DAEZE,EAAkBnB,KAAKvB,MAAML,kBAAoB4B,KAAKvB,MAAMa,gBAC9D,kBAACyB,EAAA,EAAD,CAAQE,MAAM,sBAAwB,KAEpCG,EAA8B,KAArBpB,KAAKvB,MAAMU,MACtB,kBAACkC,EAAA,EAAD,CAAQC,MAAOtB,KAAKvB,MAAMU,MAAOoC,KAAK,YAAc,KAgBtD,OAZEb,EADCV,KAAKvB,MAAMR,MACF,mGAGR,6BACE,4BAAK0C,GACL,4BAAKK,GACL,4BAAKE,GACL,4BAAKC,GACL,4BAAKC,IAKT,6BACGV,O,GAlLO9D,IAAMC,W,kBC4CT2E,E,kLAxCT7B,eAGAA,cAA0B,SAACf,EAASX,GAElC,IAAIwD,EAAS7C,EAAO,IAKhB8C,EAAc,CACdD,OAAO,GAAD,OAAKA,GACXE,UAAU,GAAD,OANGlE,wCAOZmE,cAAe,QACfC,MAAO,wCACPC,aAAc3B,OAAOC,SAASC,OAAS,YACvC0B,MAAOC,IAAOC,YAAY,IAAIC,SAAS,WAKvCC,EAFG,4CAAwCV,EAAxC,4BACPC,EAAc,IAAIU,gBAAgBV,GAAaQ,YAK/C/B,OAAOC,SAASiC,OAAOF,Q,+BAOzB,OACE,6BACE,mE,GAvCiBvF,IAAMC,W,SCoClByF,E,kLAjCT3C,eAGA,IAAI4C,EAAavC,KAAKwC,oBAGlBD,EAAU,aAEZ5C,iBAA8B8C,cAAcF,EAAU,cAEtD5C,iBAA8B+C,cAAc,oB,0CAM9C,IAAIH,EAAa,GAKjB,OAJApC,OAAOC,SAASuC,KAAKC,OAAO,GAAGC,MAAM,KAAKC,SAAQ,SAASC,GAAO,IAAD,EAC7CA,EAAKF,MAAM,KADkC,mBAC1DG,EAD0D,KACtDC,EADsD,KAE/DV,EAAWS,GAAOE,mBAAmBD,MAEhCV,I,+BAIP,OACE,6BACE,2D,GA/Be3F,IAAMC,WC2CdsG,E,uKAZX,OApBAxD,WAAwByD,uBAAsB,SAACC,GAE7C,IAAMC,EAAO,kBAAcnD,OAAOC,SAASmD,SAA9B,YAA0CpD,OAAOC,SAASoD,MACvE7D,WAAwB8D,YAAY,CAClC,qBAAwB,SACxB,SAAY,OACZ,WAAcH,EAAU,OACxB,WAAcA,EAAU,SAE1BD,EAAUZ,mBASZ9C,WAAwB+D,kBAAiB,GAGvC,6BACE,iDACA,kK,GA/Bc9G,IAAMC,WCHf8G,EARF,WACT,OACI,6BACI,uCCkCGC,MAnBf,WAME,OAHAjE,eAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkE,OAAK,EAACC,KAAK,WAAWC,UAAWpH,IACxC,kBAAC,IAAD,CAAOkH,OAAK,EAACC,KAAK,cAAcC,UAAWjH,IAC3C,kBAAC,IAAD,CAAO+G,OAAK,EAACC,KAAK,OAAOC,UAAWhH,IACpC,kBAAC,IAAD,CAAO8G,OAAK,EAACC,KAAK,UAAUC,UAAWZ,IACvC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,cAAcC,UAAWvC,IAC3C,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,YAAYC,UAAWzB,IACzC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,QAAQC,UAAWJ,M,kBCxB3CK,IAASC,OACL,kBAACC,EAAA,EAAD,CAAUC,MAAOC,SAAOC,OACpB,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,SAGCC,SAASC,eAAe,W","file":"static/js/main.4c35754e.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\n\n/**\n * This component is used to display the required\n * privacy statement which can be found in a link in the\n * about tab.\n */\nclass Privacy extends React.Component {\n    render() {\n      return (\n        <div>\n          <h1>Privacy Statement</h1>\n        </div>\n      );\n    }\n}\n\nexport default Privacy;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\n\n/**\n * This component is used to display the required\n * terms of use statement which can be found in a\n * link in the about tab.\n */\nclass TermsOfUse extends React.Component {\n    render() {\n      return (\n        <div>\n          <h1>Terms of Use</h1>\n        </div>\n      );\n    }\n}\n\nexport default TermsOfUse;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport { Avatar, Loader } from '@fluentui/react-northstar'\n\n/**\n * This tab component renders the main tab content\n * of your app.\n */\nclass Tab extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      context: {},\n      ssoToken: \"\",\n      consentRequired: false,\n      consentProvided: false,\n      graphAccessToken: \"\",\n      photo: \"\",\n      error: false\n    }\n\n    //Bind any functions that need to be passed as callbacks or used to React components\n    this.ssoLoginSuccess = this.ssoLoginSuccess.bind(this);\n    this.ssoLoginFailure = this.ssoLoginFailure.bind(this);\n    this.consentSuccess = this.consentSuccess.bind(this);\n    this.consentFailure = this.consentFailure.bind(this);\n    this.unhandledFetchError = this.unhandledFetchError.bind(this);\n    this.callGraphFromClient = this.callGraphFromClient.bind(this);\n    this.showConsentDialog = this.showConsentDialog.bind(this);\n  }\n\n  //React lifecycle method that gets called once a component has finished mounting\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidmount\n  componentDidMount(){\n    // Initialize the Microsoft Teams SDK\n    microsoftTeams.initialize();\n\n    // Get the user context from Teams and set it in the state\n    microsoftTeams.getContext((context, error) => {\n      this.setState({context:context});\n    });\n\n    //Perform Azure AD single sign-on authentication\n    let authTokenRequestOptions = {\n      successCallback: (result) => { this.ssoLoginSuccess(result) }, //The result variable is the SSO token.\n      failureCallback: (error) => {this.ssoLoginFailure(error)}\n    };\n\n    microsoftTeams.authentication.getAuthToken(authTokenRequestOptions);\n  }  \n\n  ssoLoginSuccess = async (result) => {\n    this.setState({ssoToken:result});\n    this.exchangeClientTokenForServerToken(result);\n  }\n\n  ssoLoginFailure(error){\n    console.error(\"SSO failed: \",error);\n    this.setState({error:true});\n  }\n\n  //Exchange the SSO access token for a Graph access token\n  //Learn more: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow\n  exchangeClientTokenForServerToken = async (token) => {\n\n    let serverURL = `${process.env.REACT_APP_BASE_URL}/getGraphAccessToken?ssoToken=${token}`;\n    let response = await fetch(serverURL).catch(this.unhandledFetchError); //This calls getGraphAccessToken route in /api-server/app.js\n    let data = await response.json().catch(this.unhandledFetchError);\n\n    if(!response.ok && data.error==='consent_required'){\n      //A consent_required error means it's the first time a user is logging into to the app, so they must consent to sharing their Graph data with the app.\n      //They may also see this error if MFA is required.\n      this.setState({consentRequired:true}); //This displays the consent required message.\n      this.showConsentDialog(); //Proceed to show the consent dialogue.\n    } else if (!response.ok) {\n      //Unknown error\n      console.error(data);\n      this.setState({error:true});\n    } else {\n      //Server side token exchange worked. Save the access_token to state, so that it can be picked up and used by the componentDidMount lifecycle method.\n      this.setState({graphAccessToken:data['access_token']});\n    }\n  }\n\n  //Show a popup dialogue prompting the user to consent to the required API permissions. This opens ConsentPopup.js.\n  //Learn more: https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-tab-aad#initiate-authentication-flow\n  showConsentDialog(){ \n\n    microsoftTeams.authentication.authenticate({\n      url: window.location.origin + \"/auth-start\",\n      width: 600,\n      height: 535,\n      successCallback: (result) => {this.consentSuccess(result)},\n      failureCallback: (reason) => {this.consentFailure(reason)}\n    });\n  }\n\n  //Callback function for a successful authorization\n  consentSuccess(result){\n    //Save the Graph access token in state\n    this.setState({\n      graphAccessToken: result,\n      consentProvided: true\n    });\n  }\n\n  consentFailure(reason){\n    console.error(\"Consent failed: \",reason);\n    this.setState({error:true});\n  }  \n\n  //React lifecycle method that gets called after a component's state or props updates\n  //Learn more: https://reactjs.org/docs/react-component.html#componentdidupdate\n  componentDidUpdate = async (prevProps, prevState) => {\n    \n    //Check to see if a Graph access token is now in state AND that it didn't exist previously\n    if((prevState.graphAccessToken === \"\") && (this.state.graphAccessToken !== \"\")){\n      this.callGraphFromClient();\n    }\n  }  \n\n  // Fetch the user's profile photo from Graph using the access token retrieved either from the server \n  // or microsoftTeams.authentication.authenticate\n  callGraphFromClient = async () => {\n    let upn = this.state.context['upn'];\n    let graphPhotoEndpoint = `https://graph.microsoft.com/v1.0/users/${upn}/photo/$value`;\n    let graphRequestParams = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'image/jpg',\n        \"authorization\": \"bearer \" + this.state.graphAccessToken\n      }\n    }\n\n    let response = await fetch(graphPhotoEndpoint,graphRequestParams).catch(this.unhandledFetchError);\n    if(!response.ok){\n      console.error(\"ERROR: \", response);\n      this.setState({error:true});\n    }\n    \n    let imageBlog = await response.blob().catch(this.unhandledFetchError); //Get image data as raw binary data\n\n    this.setState({\n      photo: URL.createObjectURL(imageBlog) //Convert binary data to an image URL and set the url in state\n    })\n  }\n\n  //Generic error handler ( avoids having to do async fetch in try/catch block )\n  unhandledFetchError(err){\n    console.error(\"Unhandled fetch error: \",err);\n    this.setState({error:true});\n  }\n\n  render() {\n\n      let title = Object.keys(this.state.context).length > 0 ?\n        'Congratulations ' + this.state.context['upn'] + '! This is your tab' : <Loader/>;\n\n      let ssoMessage = this.state.ssoToken === \"\" ?\n        <Loader label='Performing Azure AD single sign-on authentication...'/>: null;\n      \n      let serverExchangeMessage = (this.state.ssoToken !== \"\") && (!this.state.consentRequired) && (this.state.photo===\"\") ?\n        <Loader label='Exchanging SSO access token for Graph access token...'/> : null;\n\n      let consentMessage = (this.state.consentRequired && !this.state.consentProvided) ?\n        <Loader label='Consent required.'/> : null;\n\n      let avatar = this.state.photo !== \"\" ?\n        <Avatar image={this.state.photo} size='largest'/> : null;\n\n      let content;\n      if(this.state.error){\n        content = <h1>ERROR: Please ensure pop-ups are allowed for this website and retry</h1>\n      } else {\n        content =\n          <div>\n            <h1>{title}</h1>\n            <h3>{ssoMessage}</h3>\n            <h3>{serverExchangeMessage}</h3>          \n            <h3>{consentMessage}</h3>\n            <h1>{avatar}</h1>\n          </div>\n      }\n      \n      return (\n        <div>\n          {content}\n        </div>\n      );\n  }\n}\nexport default Tab;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\n\nimport crypto from 'crypto';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\n\n/**\n * This component is used to redirect the user to the Azure authorization endpoint from a popup\n */\nclass ConsentPopup extends React.Component {\n\n    componentDidMount() {\n\n      // Initialize the Microsoft Teams SDK\n      microsoftTeams.initialize();\n\n      // Get the user context in order to extract the tenant ID\n      microsoftTeams.getContext((context, error) => {\n\n        let tenant = context['tid']; //Tenant ID of the logged in user\n        let client_id = process.env.REACT_APP_AZURE_APP_REGISTRATION_ID; //Client ID of the Azure AD app registration ( may be from different tenant for multitenant apps)\n\n        //Form a query for the Azure implicit grant authorization flow\n        //https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-implicit-grant-flow      \n        let queryParams = {\n            tenant: `${tenant}`,\n            client_id: `${client_id}`,\n            response_type: \"token\", //token_id in other samples is only needed if using open ID\n            scope: \"https://graph.microsoft.com/User.Read\",\n            redirect_uri: window.location.origin + \"/auth-end\",\n            nonce: crypto.randomBytes(16).toString('base64')\n        }\n        \n        let url = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize?`;\n        queryParams = new URLSearchParams(queryParams).toString();\n        let authorizeEndpoint = url + queryParams;\n        \n        //Redirect to the Azure authorization endpoint. When that flow completes, the user will be directed to auth-end\n        //Go to ClosePopup.js\n        window.location.assign(authorizeEndpoint);\n\n      });\n    \n    }    \n\n    render() {\n      return (\n        <div>\n          <h1>Redirecting to consent page...</h1>\n        </div>\n      );\n    }\n}\n\nexport default ConsentPopup;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\n\n/**\n * This component is loaded when the Azure implicit grant flow has completed.\n */\nclass ClosePopup extends React.Component {\n\n    componentDidMount(){\n\n      microsoftTeams.initialize();\n\n      //The Azure implicit grant flow injects the result into the window.location.hash object. Parse it to find the results.\n      let hashParams = this.getHashParameters();\n\n      //If consent has been successfully granted, the Graph access token should be present as a field in the dictionary.\n      if (hashParams[\"access_token\"]){\n        //Notifify the showConsentDialogue function in Tab.js that authorization succeeded. The success callback should fire. \n        microsoftTeams.authentication.notifySuccess(hashParams[\"access_token\"]);\n      } else {\n        microsoftTeams.authentication.notifyFailure(\"Consent failed\");\n      }\n    }\n\n    //Helper function that converts window.location.hash into a dictionary\n    getHashParameters() {\n      let hashParams = {};\n      window.location.hash.substr(1).split(\"&\").forEach(function(item) {\n        let [key,value] = item.split('=');\n        hashParams[key] = decodeURIComponent(value);\n      });\n      return hashParams;\n  }    \n\n    render() {\n      return (\n        <div>\n          <h1>Consent flow complete.</h1>\n        </div>\n      );\n    }\n}\n\nexport default ClosePopup;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\n\n/**\n * The 'Config' component is used to display your group tabs\n * user configuration options.  Here you will allow the user to \n * make their choices and once they are done you will need to validate\n * their choices and communicate that to Teams to enable the save button.\n */\nclass TabConfig extends React.Component {\n\n    render() {\n      /**\n       * When the user clicks \"Save\", save the url for your configured tab.\n       * This allows for the addition of query string parameters based on\n       * the settings selected by the user.\n       */\n      microsoftTeams.settings.registerOnSaveHandler((saveEvent) => {\n\n        const baseUrl = `https://${window.location.hostname}:${window.location.port}`;\n        microsoftTeams.settings.setSettings({\n          \"suggestedDisplayName\": \"My Tab\",\n          \"entityId\": \"Test\",\n          \"contentUrl\": baseUrl + \"/tab\",\n          \"websiteUrl\": baseUrl + \"/tab\"\n        });\n        saveEvent.notifySuccess();\n       });\n  \n      /**\n       * After verifying that the settings for your tab are correctly\n       * filled in by the user you need to set the state of the dialog\n       * to be valid.  This will enable the save button in the configuration\n       * dialog.\n       */\n      microsoftTeams.settings.setValidityState(true);\n  \n      return (\n        <div>\n          <h1>Tab Configuration</h1>\n          <div>\n            This is where you will add your tab configuration options the user\n            can choose when the tab is added to your team/group chat.            \n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default TabConfig;","import React from 'react'\r\n\r\nconst test = () => {\r\n    return(\r\n        <div>\r\n            <h1>Works</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default test;","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport './App.css';\nimport * as microsoftTeams from \"@microsoft/teams-js\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Privacy from \"./Privacy\";\nimport TermsOfUse from \"./TermsOfUse\";\nimport Tab from \"./Tab\";\nimport ConsentPopup from \"./ConsentPopup\";\nimport ClosePopup from \"./ClosePopup\";\nimport TabConfig from \"./TabConfig\";\nimport test from \"./test\";\n\n/**\n * The main app which handles the initialization and routing\n * of the app.\n */\nfunction App() {\n\n  // Initialize the Microsoft Teams SDK\n  microsoftTeams.initialize();\n\n  // Display the app home page hosted in Teams\n  return (\n    <Router>\n      <Route exact path=\"/privacy\" component={Privacy} />\n      <Route exact path=\"/termsofuse\" component={TermsOfUse} />\n      <Route exact path=\"/tab\" component={Tab} />\n      <Route exact path=\"/config\" component={TabConfig}/>\n      <Route exact path=\"/auth-start\" component={ConsentPopup} />\n      <Route exact path=\"/auth-end\" component={ClosePopup} />\n      <Route exact path=\"/test\" component={test} />\n    </Router>\n  );\n}\n\nexport default App;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider, themes } from '@fluentui/react-northstar' //https://fluentsite.z22.web.core.windows.net/quick-start\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <Provider theme={themes.teams}>\n        <React.StrictMode>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </React.StrictMode>\n    </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}